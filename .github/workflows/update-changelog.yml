name: Changelog Update Production

on:
  push:
    tags:
      - "v*"

jobs:
  check-version:
    runs-on: ubuntu-latest
    steps:
      - name: 🏗 Setup repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}

      - name: 📌 Get latest & previous tags
        id: tags
        run: |
          git fetch --tags
          TAGS=($(git tag | sort -V -r))

          # 최신 태그
          LATEST_TAG=${TAGS[0]}
          # 바로 이전 태그
          PREVIOUS_TAG=${TAGS[1]}

          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
          echo "🔍 커밋 범위: $PREVIOUS_TAG ~ $LATEST_TAG"

      - name: 🔧 Update version in app.config.js
        run: |
          VERSION=${{ steps.tags.outputs.LATEST_TAG#v }}
          sed -i "s/const appVersion = \".*\"/const appVersion = \"$VERSION\"/" app.config.js

  update-eas:
    runs-on: ubuntu-latest
    needs: check-version

    steps:
      - name: 🏗 Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: npm

      - name: 🏗 Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: 📦 Install dependencies
        run: npm install

      - name: 🚀 Create update
        run: eas update --environment production --branch production --auto --non-interactive

  changelog:
    runs-on: ubuntu-latest
    needs: check-version
    permissions:
      contents: write

    steps:
      - name: 📝 Generate changelog log
        run: |
          if [ -z "${{ steps.tags.outputs.PREVIOUS_TAG }}" ]; then
            git log --pretty=format:"* %s (%h) @%an" >> temp_changelog.txt
          else
            git log --pretty=format:"* %s (%h) @%an" "${{ steps.tags.outputs.PREVIOUS_TAG }}..${{ steps.tags.outputs.LATEST_TAG }}" >> temp_changelog.txt
          fi

      - name: 🛠 Build new CHANGELOG.md
        run: |
          echo "## ${{ steps.tags.outputs.LATEST_TAG }} ($(date +'%Y-%m-%d'))" > new_changelog.txt
          echo "" >> new_changelog.txt

          while IFS= read -r line; do
            commit_msg=$(echo "$line" | sed -E 's/\* (.*) \(.*\) @.*/\1/')
            commit_hash=$(echo "$line" | sed -E 's/.*\((.*)\) @.*/\1/')
            author=$(echo "$line" | sed -E 's/.*@(.*)/\1/')

            if [[ $commit_msg == "Release version"* ]]; then
              continue
            fi

            pr_link=""
            if [[ $commit_msg =~ \(#([0-9]+)\) ]]; then
              pr_number=${BASH_REMATCH[1]}
              pr_link="([#${pr_number}](https://github.com/${{ github.repository }}/pull/${pr_number}))"
            fi

            commit_msg=$(echo "$commit_msg" | sed -E 's/\(#[0-9]+\)$//' | sed -E 's/\(#[0-9]+\) //')
            commit_link="([${commit_hash}](https://github.com/${{ github.repository }}/commit/${commit_hash}))"

            echo "* ${commit_msg} ${pr_link} ${commit_link} @${author}" >> new_changelog.txt
          done < temp_changelog.txt

          echo "" >> new_changelog.txt

          if [ -f CHANGELOG.md ]; then
            cat CHANGELOG.md >> new_changelog.txt
          fi

          mv new_changelog.txt CHANGELOG.md
          rm -f temp_changelog.txt

      - name: 🚀 Commit and push changelog
        uses: somaz94/go-git-commit-action@v1
        with:
          repository: ${{ github.repository }}
          branch: main
          commit_message: "Release version ${{ steps.tags.outputs.LATEST_TAG }}"
          user_email: "action@github.com"
          user_name: "GitHub Action"
          repository_path: "."
          file_pattern: "CHANGELOG.md app.config.js"
          github_token: ${{ secrets.GH_PAT }}
